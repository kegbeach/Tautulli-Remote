import '../../../../core_new/enums/location.dart';
import '../../../../core_new/enums/media_type.dart';
import '../../../../core_new/enums/state.dart';
import '../../../../core_new/enums/stream_decision.dart';
import '../../../../core_new/enums/subtitle_decision.dart';
import '../../../../core_new/enums/video_dynamic_range.dart';
import '../../../../core_new/helpers/new_value_helper.dart';
import '../../domain/entities/new_activity.dart';

class NewActivityModel extends NewActivity {
  NewActivityModel({
    String? audioChannelLayout,
    String? audioCodec,
    String? bandwidth,
    String? channelCallSign,
    String? channelIdentifier,
    required String container,
    int? duration,
    required String friendlyName,
    int? grandparentRatingKey,
    String? grandparentThumb,
    String? grandparentTitle,
    required int height,
    required String ipAddress,
    required bool live,
    required Location location,
    required int mediaIndex,
    required MediaType mediaType,
    required bool optimizedVersion,
    String? optimizedVersionProfile,
    String? optimizedVersionTitle,
    String? originallyAvailableAt,
    int? parentMediaIndex,
    int? parentRatingKey,
    String? parentThumb,
    String? parentTitle,
    required String platformName,
    required String player,
    required String product,
    required int progressPercent,
    required String qualityProfile,
    required int ratingKey,
    required bool relayed,
    required bool secure,
    required String sessionId,
    required int sessionKey,
    required State state,
    String? streamAudioChannelLayout,
    String? streamAudioCodec,
    StreamDecision? streamAudioDecision,
    int? streamBitrate,
    required String streamContainer,
    StreamDecision? streamContainerDecision,
    SubtitleDecision? streamSubtitleDecision,
    String? streamSubtitleCodec,
    String? streamVideoCodec,
    StreamDecision? streamVideoDecision,
    VideoDynamicRange? streamVideoDynamicRange,
    String? streamVideoFullResolution,
    String? subtitleCodec,
    required bool subtitles,
    //TODO: Should subType be an enum?
    String? subType,
    required bool syncedVersion,
    String? syncedVersionProfile,
    String? thumb,
    required String title,
    required StreamDecision transcodeDecision,
    required bool transcodeHwDecoding,
    required bool transcodeHwEncoding,
    required int transcodeProgress,
    double? transcodeSpeed,
    required bool transcodeThrottled,
    required int userId,
    required String userThumb,
    String? videoCodec,
    VideoDynamicRange? videoDynamicRange,
    String? videoFullResolution,
    required int viewOffset,
    required int width,
    int? year,
    String? posterUrl,
  }) : super(
          audioChannelLayout: audioChannelLayout,
          audioCodec: audioCodec,
          bandwidth: bandwidth,
          channelCallSign: channelCallSign,
          channelIdentifier: channelIdentifier,
          container: container,
          duration: duration,
          friendlyName: friendlyName,
          grandparentRatingKey: grandparentRatingKey,
          grandparentThumb: grandparentThumb,
          grandparentTitle: grandparentTitle,
          height: height,
          ipAddress: ipAddress,
          live: live,
          location: location,
          mediaIndex: mediaIndex,
          mediaType: mediaType,
          optimizedVersion: optimizedVersion,
          optimizedVersionProfile: optimizedVersionProfile,
          optimizedVersionTitle: optimizedVersionTitle,
          originallyAvailableAt: originallyAvailableAt,
          parentMediaIndex: parentMediaIndex,
          parentRatingKey: parentRatingKey,
          parentThumb: parentThumb,
          parentTitle: parentTitle,
          platformName: platformName,
          player: player,
          product: product,
          progressPercent: progressPercent,
          qualityProfile: qualityProfile,
          ratingKey: ratingKey,
          relayed: relayed,
          secure: secure,
          sessionKey: sessionKey,
          sessionId: sessionId,
          state: state,
          streamAudioChannelLayout: streamAudioChannelLayout,
          streamAudioCodec: streamAudioCodec,
          streamAudioDecision: streamAudioDecision,
          streamBitrate: streamBitrate,
          streamContainer: streamContainer,
          streamContainerDecision: streamContainerDecision,
          streamSubtitleDecision: streamSubtitleDecision,
          streamSubtitleCodec: streamSubtitleCodec,
          streamVideoCodec: streamVideoCodec,
          streamVideoDecision: streamVideoDecision,
          streamVideoDynamicRange: streamVideoDynamicRange,
          streamVideoFullResolution: streamVideoFullResolution,
          subtitleCodec: subtitleCodec,
          subtitles: subtitles,
          subType: subType,
          syncedVersion: syncedVersion,
          syncedVersionProfile: syncedVersionProfile,
          thumb: thumb,
          title: title,
          transcodeDecision: transcodeDecision,
          transcodeHwEncoding: transcodeHwEncoding,
          transcodeHwDecoding: transcodeHwDecoding,
          transcodeProgress: transcodeProgress,
          transcodeSpeed: transcodeSpeed,
          transcodeThrottled: transcodeThrottled,
          userId: userId,
          userThumb: userThumb,
          videoCodec: videoCodec,
          videoDynamicRange: videoDynamicRange,
          videoFullResolution: videoFullResolution,
          viewOffset: viewOffset,
          width: width,
          year: year,
          posterUrl: posterUrl,
        );

  NewActivityModel copyWith({
    required String posterUrl,
  }) {
    return NewActivityModel(
      audioChannelLayout: this.audioChannelLayout,
      audioCodec: this.audioCodec,
      bandwidth: this.bandwidth,
      channelCallSign: this.channelCallSign,
      channelIdentifier: this.channelIdentifier,
      container: this.container,
      duration: this.duration,
      friendlyName: this.friendlyName,
      grandparentRatingKey: this.grandparentRatingKey,
      grandparentThumb: this.grandparentThumb,
      grandparentTitle: this.grandparentTitle,
      height: this.height,
      ipAddress: this.ipAddress,
      live: this.live,
      location: this.location,
      mediaIndex: this.mediaIndex,
      mediaType: this.mediaType,
      optimizedVersion: this.optimizedVersion,
      optimizedVersionProfile: this.optimizedVersionProfile,
      optimizedVersionTitle: this.optimizedVersionTitle,
      originallyAvailableAt: this.originallyAvailableAt,
      parentMediaIndex: this.parentMediaIndex,
      parentRatingKey: this.parentRatingKey,
      parentThumb: this.parentThumb,
      parentTitle: this.parentTitle,
      platformName: this.platformName,
      player: this.player,
      product: this.product,
      progressPercent: this.progressPercent,
      qualityProfile: this.qualityProfile,
      ratingKey: this.ratingKey,
      relayed: this.relayed,
      secure: this.secure,
      sessionKey: this.sessionKey,
      sessionId: this.sessionId,
      state: this.state,
      streamAudioChannelLayout: this.streamAudioChannelLayout,
      streamAudioCodec: this.streamAudioCodec,
      streamAudioDecision: this.streamAudioDecision,
      streamBitrate: this.streamBitrate,
      streamContainer: this.streamContainer,
      streamContainerDecision: this.streamContainerDecision,
      streamSubtitleDecision: this.streamSubtitleDecision,
      streamSubtitleCodec: this.streamSubtitleCodec,
      streamVideoCodec: this.streamVideoCodec,
      streamVideoDecision: this.streamVideoDecision,
      streamVideoDynamicRange: this.streamVideoDynamicRange,
      streamVideoFullResolution: this.streamVideoFullResolution,
      subtitleCodec: this.subtitleCodec,
      subtitles: this.subtitles,
      subType: this.subType,
      syncedVersion: this.syncedVersion,
      syncedVersionProfile: this.syncedVersionProfile,
      thumb: this.thumb,
      title: this.title,
      transcodeDecision: this.transcodeDecision,
      transcodeHwEncoding: this.transcodeHwEncoding,
      transcodeHwDecoding: this.transcodeHwDecoding,
      transcodeProgress: this.transcodeProgress,
      transcodeSpeed: this.transcodeSpeed,
      transcodeThrottled: this.transcodeThrottled,
      userId: this.userId,
      userThumb: this.userThumb,
      videoCodec: this.videoCodec,
      videoDynamicRange: this.videoDynamicRange,
      videoFullResolution: this.videoFullResolution,
      viewOffset: this.viewOffset,
      width: this.width,
      year: this.year,
      posterUrl: posterUrl,
    );
  }

  factory NewActivityModel.fromJson(Map<String, dynamic> json) {
    return NewActivityModel(
      audioChannelLayout: NewValueHelper.cast(
        json['audio_channel_layout'],
        CastType.string,
      ),
      audioCodec: NewValueHelper.cast(
        json['audio_codec'],
        CastType.string,
      ),
      bandwidth: NewValueHelper.cast(
        json['bandwidth'],
        CastType.string,
      ),
      channelCallSign: NewValueHelper.cast(
        json['channel_call_sign'],
        CastType.string,
      ),
      channelIdentifier: NewValueHelper.cast(
        json['channel_identifier'],
        CastType.string,
      ),
      container: NewValueHelper.cast(
        json['container'],
        CastType.string,
      ),
      duration: NewValueHelper.cast(
        json['duration'],
        CastType.int,
      ),
      friendlyName: NewValueHelper.cast(
        json['friendly_name'],
        CastType.string,
      ),
      grandparentRatingKey: NewValueHelper.cast(
        json['grandparent_rating_key'],
        CastType.int,
      ),
      grandparentThumb: NewValueHelper.cast(
        json['grandparent_thumb'],
        CastType.string,
      ),
      grandparentTitle: NewValueHelper.cast(
        json['grandparent_title'],
        CastType.string,
      ),
      height: NewValueHelper.cast(
        json['height'],
        CastType.int,
      ),
      ipAddress: NewValueHelper.cast(
        json['ip_address'],
        CastType.string,
      ),
      live: NewValueHelper.cast(
        json['live'],
        CastType.bool,
      ),
      location: NewValueHelper.cast(
        json['location'],
        CastType.location,
      ),
      mediaIndex: NewValueHelper.cast(
        json['media_index'],
        CastType.int,
      ),
      mediaType: NewValueHelper.cast(
        json['media_type'],
        CastType.mediaType,
      ),
      optimizedVersion: NewValueHelper.cast(
        json['optimized_version'],
        CastType.bool,
      ),
      optimizedVersionProfile: NewValueHelper.cast(
        json['optimized_version_profile'],
        CastType.string,
      ),
      optimizedVersionTitle: NewValueHelper.cast(
        json['optimized_version_title'],
        CastType.string,
      ),
      originallyAvailableAt: NewValueHelper.cast(
        json['originally_available_at'],
        CastType.string,
      ),
      parentMediaIndex: NewValueHelper.cast(
        json['parent_media_index'],
        CastType.int,
      ),
      parentRatingKey: NewValueHelper.cast(
        json['parent_rating_key'],
        CastType.int,
      ),
      parentThumb: NewValueHelper.cast(
        json['parent_thumb'],
        CastType.string,
      ),
      parentTitle: NewValueHelper.cast(
        json['parent_title'],
        CastType.string,
      ),
      platformName: NewValueHelper.cast(
        json['platform_name'],
        CastType.string,
      ),
      player: NewValueHelper.cast(
        json['player'],
        CastType.string,
      ),
      product: NewValueHelper.cast(
        json['product'],
        CastType.string,
      ),
      progressPercent: NewValueHelper.cast(
        json['progress_percent'],
        CastType.int,
      ),
      qualityProfile: NewValueHelper.cast(
        json['quality_profile'],
        CastType.string,
      ),
      ratingKey: NewValueHelper.cast(
        json['rating_key'],
        CastType.int,
      ),
      relayed: NewValueHelper.cast(
        json['relayed'],
        CastType.bool,
      ),
      secure: NewValueHelper.cast(
        json['secure'],
        CastType.bool,
      ),
      sessionKey: NewValueHelper.cast(
        json['session_key'],
        CastType.int,
      ),
      sessionId: NewValueHelper.cast(
        json['session_id'],
        CastType.string,
      ),
      state: NewValueHelper.cast(
        json['state'],
        CastType.state,
      ),
      streamAudioChannelLayout: NewValueHelper.cast(
        json['stream_audio_channel_layout'],
        CastType.string,
      ),
      streamAudioCodec: NewValueHelper.cast(
        json['stream_audio_codec'],
        CastType.string,
      ),
      streamAudioDecision: NewValueHelper.cast(
        json['stream_audio_decision'],
        CastType.streamDecision,
      ),
      streamBitrate: NewValueHelper.cast(
        json['stream_bitrate'],
        CastType.int,
      ),
      streamContainer: NewValueHelper.cast(
        json['stream_container'],
        CastType.string,
      ),
      streamContainerDecision: NewValueHelper.cast(
        json['stream_container_decision'],
        CastType.streamDecision,
      ),
      streamSubtitleDecision: NewValueHelper.cast(
        json['stream_subtitle_decision'],
        CastType.subtitleDecision,
      ),
      streamSubtitleCodec: NewValueHelper.cast(
        json['stream_subtitle_codec'],
        CastType.string,
      ),
      streamVideoCodec: NewValueHelper.cast(
        json['stream_video_codec'],
        CastType.string,
      ),
      streamVideoDecision: NewValueHelper.cast(
        json['stream_video_decision'],
        CastType.streamDecision,
      ),
      streamVideoDynamicRange: NewValueHelper.cast(
        json['video_dynamic_range'],
        CastType.videoDynamicRange,
      ),
      streamVideoFullResolution: NewValueHelper.cast(
        json['stream_video_full_resolution'],
        CastType.string,
      ),
      subtitleCodec: NewValueHelper.cast(
        json['subtitle_codec'],
        CastType.string,
      ),
      subtitles: NewValueHelper.cast(
        json['subtitles'],
        CastType.bool,
      ),
      subType: NewValueHelper.cast(
        json['sub_type'],
        CastType.string,
      ),
      syncedVersion: NewValueHelper.cast(
        json['synced_version'],
        CastType.bool,
      ),
      syncedVersionProfile: NewValueHelper.cast(
        json['synced_version_profile'],
        CastType.string,
      ),
      thumb: NewValueHelper.cast(
        json['thumb'],
        CastType.string,
      ),
      title: NewValueHelper.cast(
        json['title'],
        CastType.string,
      ),
      transcodeDecision: NewValueHelper.cast(
        json['transcode_decision'],
        CastType.streamDecision,
      ),
      transcodeHwEncoding: NewValueHelper.cast(
        json['transcode_hw_encoding'],
        CastType.bool,
      ),
      transcodeHwDecoding: NewValueHelper.cast(
        json['transcode_hw_decoding'],
        CastType.bool,
      ),
      transcodeProgress: NewValueHelper.cast(
        json['transcode_progress'],
        CastType.int,
      ),
      transcodeSpeed: NewValueHelper.cast(
        json['transcode_speed'],
        CastType.double,
      ),
      transcodeThrottled: NewValueHelper.cast(
        json['transcode_throttled'],
        CastType.bool,
      ),
      userId: NewValueHelper.cast(
        json['user_id'],
        CastType.int,
      ),
      userThumb: NewValueHelper.cast(
        json['user_thumb'],
        CastType.string,
      ),
      videoCodec: NewValueHelper.cast(
        json['video_codec'],
        CastType.string,
      ),
      videoDynamicRange: NewValueHelper.cast(
        json['video_dynamic_range'],
        CastType.videoDynamicRange,
      ),
      videoFullResolution: NewValueHelper.cast(
        json['video_full_resolution'],
        CastType.string,
      ),
      viewOffset: NewValueHelper.cast(
        json['view_offset'],
        CastType.int,
      ),
      width: NewValueHelper.cast(
        json['width'],
        CastType.int,
      ),
      year: NewValueHelper.cast(
        json['year'],
        CastType.int,
      ),
    );
  }
}
